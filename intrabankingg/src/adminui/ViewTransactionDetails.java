package adminui;

import model.dao.*;
import model.to.*;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;

public class ViewTransactionDetails extends javax.swing.JInternalFrame {

    List<TransactionInfoTO> transaction;
    private JPopupMenu popup;
    private int row;
    public ViewTransactionDetails() {
        initComponents();
        bindTables();
        popup = new JPopupMenu();
        JMenuItem deleteitem = new JMenuItem("Delete This Record");
        popup.add(deleteitem);
       // popup.add(edititem);
        deleteitem.setFont(new Font("Maiandra GD", Font.BOLD, 18));
        //edititem.setFont(new Font("Maiandra GD", Font.BOLD, 18));
        try {
            ImageIcon icon;
            icon = new ImageIcon(getClass().getResource("/adminui/icons8-Trash-64.png"));
            deleteitem.setIcon(icon);
            //icon = new ImageIcon(getClass().getResource("/adminui/icons8-Edit-64.png"));
          //  edititem.setIcon(icon);
        } catch (Exception ex) {
        }
        deleteitem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                deleterecord();
            }
        });
        /**edititem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                editrecord();
            }
        });**/
        row = -1;
    }
      public void bindTables() {
        transaction=new TransactionInfoDAO().getAllRecord();
        String[] colnames={"Transaction ID","Amount","Account ID","Transaction Date","Transaction Type","Description","IsApprove"};
        Object[][] records=null;
        if(transaction!=null  &&  transaction.size()>0) {
            records=new Object[transaction.size()][colnames.length];
            int i=0;
            for(TransactionInfoTO att:transaction){
                records[i]=new Object[]{att.getTransactionid(),att.getAmount(),att.getAccountid(),att.getTransactiondate(),att.getTransactiontype(),att.getDescription(),att.getIsapprove()};
                i++;
            }
        }else{
            records=new Object[1][colnames.length];
            records[0]=new Object[]{"No Record","No Record","No Record","No Record","No Record","No Record","No Record"};
                }
        DefaultTableModel dtm=new DefaultTableModel(records, colnames) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        tableTransactionDetails.getTableHeader().setReorderingAllowed(false);
        tableTransactionDetails.setAutoCreateRowSorter(true);
        tableTransactionDetails.setModel(dtm);
                }
      public void deleterecord() {
        if (row != -1 && transaction != null && row < transaction.size()) {
            int result = JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Delete This Record ?", "Message From Admin ", JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                String message = "";
                TransactionInfoDAO action = new TransactionInfoDAO();
                TransactionInfoTO record = transaction.get(row);
                if (action.deleterecord(String.valueOf(record.getTransactionid()))) {
                    message = "Record Is Removed From Database";
                    bindTables();
                } else {
                    if (action.getErrormessage().contains("FOREIGN")) {
                        message = "This Account Is Enrolled By User. So Cannot Be Deleted";
                    } else {
                        message = "Deletion Failure Due To " + action.getErrormessage();
                    }
                }
                JOptionPane.showMessageDialog(this, message);
            }
        }
        row = -1;
    }
      public void editrecord() {
        if (row != -1 && transaction != null && row < transaction.size()) {
            TransactionInfoTO record = transaction.get(row);
            CommonOperations.showScreen(getDesktopPane(), new AddNewTransaction(record));
            dispose();
        }
        row = -1;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableTransactionDetails = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Transaction Details");

        tableTransactionDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableTransactionDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransactionDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableTransactionDetails);

        btnRefresh.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(316, 316, 316)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(319, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        bindTables();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tableTransactionDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransactionDetailsMouseClicked
         if (evt.getButton() == MouseEvent.BUTTON3) {
            int rowpoint = tableTransactionDetails.rowAtPoint(evt.getPoint());
            tableTransactionDetails.getSelectionModel().setSelectionInterval(rowpoint, rowpoint);
            popup.show(tableTransactionDetails, evt.getX(), evt.getY());
            row = tableTransactionDetails.getSelectedRow();
        }
    }//GEN-LAST:event_tableTransactionDetailsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTransactionDetails;
    // End of variables declaration//GEN-END:variables
}
