package adminui;

import model.dao.*;
import model.to.*;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class ViewAccountType extends javax.swing.JInternalFrame {

    List<AccountTypeTO> accounts;
    private JPopupMenu popup;
    private int row;
    
    public ViewAccountType() {
        initComponents();
        bindTables();
        popup=new JPopupMenu();
        JMenuItem deleteitem=new JMenuItem("Delete This Record");
        JMenuItem edititem=new JMenuItem("Edit This Record");
        popup.add(deleteitem);
        popup.add(edititem);
        deleteitem.setFont(new Font("Maiandra GD", Font.BOLD, 18));
        edititem.setFont(new Font("Maiandra GD", Font.BOLD, 18));
        try{
            ImageIcon icon;
            icon=new ImageIcon(getClass().getResource("/adminui/icons8-Trash-64.png"));
            deleteitem.setIcon(icon);
            icon=new ImageIcon(getClass().getResource("/adminui/icons8-Edit-64.png"));
            edititem.setIcon(icon);
        }catch(Exception ex){
        }
            deleteitem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                deleterecord();
                }
            });
            edititem.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                editrecord();
                }
            });
    }
    public void bindTables() {
        accounts=new AccountTypeDAO().getAllRecord();
        String[] colnames={"Account Type ID","Account Type Name","Interest Rate","Minimum"};
        Object[][] records=null;
        if(accounts!=null  &&  accounts.size()>0) {
            records=new Object[accounts.size()][colnames.length];
            int i=0;
            for(AccountTypeTO att:accounts){
                records[i]=new Object[]{att.getTypeid(),att.getTypename(),att.getInterestrate(),att.getMinimum()};
                i++;
            }
        }else{
            records=new Object[1][colnames.length];
            records[0]=new Object[]{"No Record","No Record","No Record","No Record"};
                }
        DefaultTableModel dtm=new DefaultTableModel(records, colnames) {

            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        tableAccountType.getTableHeader().setReorderingAllowed(false);
        tableAccountType.setAutoCreateRowSorter(true);
        tableAccountType.setModel(dtm);
                }
    public void deleterecord(){
       if(row != -1 && accounts != null && row < accounts.size()){
          int result= JOptionPane.showConfirmDialog(this, "Are You Sure You Want To Delete This Record ?", "Message From Admin ",JOptionPane.YES_NO_OPTION);
          if(result==JOptionPane.YES_OPTION){
              String message="";
              AccountTypeDAO action=new AccountTypeDAO();
              AccountTypeTO record=accounts.get(row);
              if(action.deleterecord(record.getTypeid())) {
                  message="Record Is Removed From Database";
                  bindTables();
              }else{
                  if(action.getErrormessage().contains("FOREIGN")){
                      message="This Account Is Enrolled By User. So Cannot Be Deleted";
                  }else{
                  message="Deletion Failure Due To " + action.getErrormessage();
              }
              }
              JOptionPane.showMessageDialog(this, message);
          }
       }
       row=-1;
   }
    public void editrecord(){
       if(row != -1 && accounts != null && row < accounts.size()){ 
           AccountTypeTO record=accounts.get(row);
           CommonOperations.showScreen(getDesktopPane(),new AddNewAccountType(record));
           dispose();
       }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableAccountType = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("View Account Type Details");

        tableAccountType.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableAccountType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAccountTypeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableAccountType);

        btnRefresh.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(263, Short.MAX_VALUE)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        bindTables();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tableAccountTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAccountTypeMouseClicked
         if (evt.getButton() == MouseEvent.BUTTON3) {
            int rowpoint = tableAccountType.rowAtPoint(evt.getPoint());
            tableAccountType.getSelectionModel().setSelectionInterval(rowpoint, rowpoint);
            popup.show(tableAccountType, evt.getX(), evt.getY());
            row = tableAccountType.getSelectedRow();
        }
    }//GEN-LAST:event_tableAccountTypeMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAccountType;
    // End of variables declaration//GEN-END:variables
}
